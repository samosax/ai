class Node:
    def __init__(self, data, level, fval):
        # Initialize the node with the data ,level of the node and the calculated fvalue
        self.data = data
        self.level = level
        self.fval = fval

    def generate_child(self):
        # Generate hild nodes from the given node by moving the blank space
        # either in the four direction {up,down,left,right}
        x, y = self.find(self.data, '_')
        # val_list contains position values for moving the blank space in either of
        # the 4 direction [up,down,left,right] respectively.
        val_list = [[x, y - 1], [x, y + 1], [x - 1, y], [x + 1, y]]
        children = []
        for i in val_list:
            child = self.shuffle(self.data, x, y, i[0], i[1])
            if child is not None:
                child_node = Node(child, self.level + 1, 0)
                children.append(child_node)
        return children

    def shuffle(self, puz, x1, y1, x2, y2):
        # Move the blank space in the given direction and if the position value are out
        # of limits the return None
        if x2 >= 0 and x2 < len(self.data) and y2 >= 0 and y2 < len(self.data):
            temp_puz = []
            temp_puz = self.copy(puz)
            temp = temp_puz[x2][y2]
            temp_puz[x2][y2] = temp_puz[x1][y1]
            temp_puz[x1][y1] = temp
            return temp_puz
        else:
            return None

    def copy(self, root):
        # copy function to create a similar matrix of the given node
        temp = []
        for i in root:
            t = []
            for j in i:
                t.append(j)
            temp.append(t)
        return temp

    def find(self, puz, x):
        # Specifically used to find the position of the blank space
        for i in range(0, len(self.data)):
            for j in range(0, len(self.data)):
                if puz[i][j] == x:
                    return i, j


class Puzzle:
    def __init__(self, size):
        # Initialize the puzzle size by the the specified size,open and closed lists to empty
        self.n = size
        self.open = []
        self.closed = []

    def accept(self):
        # Accepts the puzzle from the user
        puz = []
        for i in range(0, self.n):
            temp = input().split(" ")
            puz.append(temp)
        return puz

    def f(self, start, goal):
        # Heuristic function to calculate Heuristic value f(x) = h(x) + g(x)
        return self.h(start.data, goal) + start.level

    def h(self, start, goal):
        # Calculates the difference between the given puzzles
        temp = 0
        for i in range(0, self.n):
            for j in range(0, self.n):
                if start[i][j] != goal[i][j] and start[i][j] != '_':
                    temp += 1
        return temp

    def process(self):
        # Accept Start and Goal Puzzle state
        print("enter the start state matrix \n")
        start = self.accept()
        print("enter the goal state matrix \n")
        goal = self.accept()
        start = Node(start, 0, 0)
        start.fval = self.f(start, goal)
        # put the start node in the open list
        self.open.append(start)
        print("\n\n")
        while True:
            cur = self.open[0]
            print("==================================================\n")
            for i in cur.data:
                for j in i:
                    print(j, end=" ")
                print("")
            # if the difference between current and goal node is 0 we have reached the goal node
            if (self.h(cur.data, goal) == 0):
                break
            for i in cur.generate_child():
                i.fval = self.f(i, goal)
                self.open.append(i)
            self.closed.append(cur)
            del self.open[0]
            # sort the open list based on f value
            self.open.sort(key=lambda x: x.fval, reverse=False)


puz = Puzzle(3)
puz.process()


//maze
from queue import PriorityQueue

def heuristic_cost(coord, end_loc):
    # A simple Manhattan distance heuristic
    return abs(coord[0] - end_loc[0]) + abs(coord[1] - end_loc[1])

def solveMazeAStar(maze):
    R, C = len(maze), len(maze[0])

    start = (0, 0)
    for r in range(R):
        for c in range(C):
            if maze[r][c] == 'S':
                start = (r, c)
                break
        else:
            continue
        break
    else:
        return None

    end = (0, 0)
    for r in range(R):
        for c in range(C):
            if maze[r][c] == 'E':
                end = (r, c)
                break
        else:
            continue
        break
    else:
        return None

    priority_queue = PriorityQueue()
    priority_queue.put((0, start))
    directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]
    visited = [[False] * C for _ in range(R)]
    path = [[None] * C for _ in range(R)]

    while not priority_queue.empty():
        _, coord = priority_queue.get()
        visited[coord[0]][coord[1]] = True

        if coord == end:
            # Reconstruct the path
            path_coords = []
            while coord:
                path_coords.append((coord[0], coord[1]))
                coord = path[coord[0]][coord[1]]
            path_coords.reverse()
            return path_coords

        for dir in directions:
            nr, nc = coord[0] + dir[0], coord[1] + dir[1]
            if (nr < 0 or nr >= R or nc < 0 or nc >= C or maze[nr][nc] == "#" or visited[nr][nc]):
                continue
            cost_to_neighbor = heuristic_cost(coord, end) + 1
            priority_queue.put((cost_to_neighbor, (nr, nc)))
            visited[nr][nc] = True
            path[nr][nc] = (coord[0], coord[1])

    return None

def print_maze_with_path(maze, path_coords):
    for r in range(len(maze)):
        for c in range(len(maze[0])):
            if (r, c) in path_coords:
                print("*", end=" ")  # Print path as '*'
            else:
                print(maze[r][c], end=" ")
        print()

if __name__ == '__main__':
    # Get input for the maze
    maze_input = []
    print("Enter the maze rows. Press Enter without input to finish.")
    while True:
        row_input = input().strip()
        if not row_input:
            break
        maze_input.append(list(row_input))

    # Call the solveMazeAStar function with the input maze
    path_coords = solveMazeAStar(maze_input)

    # Display the result
    if path_coords is not None:
        print("Path coordinates:", path_coords)
        print("\nMaze with Path:")
        print_maze_with_path(maze_input, path_coords)
    else:
        print("No starting point 'S' or ending point 'E' found in the maze.")

