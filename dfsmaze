def solveMazeDFS(maze):
    R, C = len(maze), len(maze[0])

    start = (0, 0)
    for r in range(R):
        for c in range(C):
            if maze[r][c] == 'S':
                start = (r, c)
                break
        else:
            continue
        break
    else:
        return None

    directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]
    visited = [[False] * C for _ in range(R)]
    path = [[None] * C for _ in range(R)]

    def dfs(coord):
        visited[coord[0]][coord[1]] = True

        if maze[coord[0]][coord[1]] == "E":
            return [coord]

        for dir in directions:
            nr, nc = coord[0] + dir[0], coord[1] + dir[1]
            if (nr < 0 or nr >= R or nc < 0 or nc >= C or maze[nr][nc] == "#" or visited[nr][nc]):
                continue
            path[nr][nc] = (coord[0], coord[1])
            result = dfs((nr, nc))
            if result:
                return [coord] + result

        return []

    path_coords = dfs(start)

    return path_coords

def print_maze_with_path(maze, path_coords):
    for r in range(len(maze)):
        for c in range(len(maze[0])):
            if (r, c) in path_coords:
                print("*", end=" ")  # Print path as '*'
            else:
                print(maze[r][c], end=" ")
        print()

if __name__ == '__main__':
    # Get input for the maze
    maze_input = []
    print("Enter the maze rows. Press Enter without input to finish.")
    while True:
        row_input = input().strip()
        if not row_input:
            break
        maze_input.append(list(row_input))

    # Call the solveMazeDFS function with the input maze
    path_coords = solveMazeDFS(maze_input)

    # Display the result
    if path_coords:
        print("Path coordinates:", path_coords)
        print("\nMaze with Path:")
        print_maze_with_path(maze_input, path_coords)
    else:
        print("No path found in the maze.")
