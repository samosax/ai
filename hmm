import numpy as np

class HiddenMarkovModel:
    def _init_(self, states, observations, initial_probabilities, transition_matrix, emission_matrix):
        self.states = states
        self.observations = observations
        self.initial_probabilities = initial_probabilities
        self.transition_matrix = transition_matrix
        self.emission_matrix = emission_matrix

    def _forward_algorithm(self, observation_sequence):
        T = len(observation_sequence)
        N = len(self.states)
        alpha = np.zeros((T, N))

        # Initialization
        alpha[0] = self.initial_probabilities * self.emission_matrix[:, self.observations.index(observation_sequence[0])]

        # Recursion
        for t in range(1, T):
            for j in range(N):
                alpha[t, j] = np.sum(alpha[t-1] * self.transition_matrix[:, j]) * self.emission_matrix[j, self.observations.index(observation_sequence[t])]

        return alpha

    def _backward_algorithm(self, observation_sequence):
        T = len(observation_sequence)
        N = len(self.states)
        beta = np.zeros((T, N))

        beta[-1] = 1

        for t in range(T-2, -1, -1):
            for i in range(N):
                beta[t, i] = np.sum(beta[t+1] * self.transition_matrix[i, :] * self.emission_matrix[:, self.observations.index(observation_sequence[t+1])])

        return beta

    def predict_sequence_probability(self, observation_sequence):
        alpha = self._forward_algorithm(observation_sequence)
        return np.sum(alpha[-1])

    def predict_state_sequence(self, observation_sequence):
        T = len(observation_sequence)
        N = len(self.states)
        delta = np.zeros((T, N))
        psi = np.zeros((T, N))

        delta[0] = self.initial_probabilities * self.emission_matrix[:, self.observations.index(observation_sequence[0])]

        for t in range(1, T):
            for j in range(N):
                delta[t, j] = np.max(delta[t-1] * self.transition_matrix[:, j]) * self.emission_matrix[j, self.observations.index(observation_sequence[t])]
                psi[t, j] = np.argmax(delta[t-1] * self.transition_matrix[:, j])

        # Backtracking
        state_sequence = [np.argmax(delta[-1])]
        for t in range(T-2, -1, -1):
            state_sequence.insert(0, int(psi[t+1, state_sequence[0]]))

        return [self.states[i] for i in state_sequence]

# Define your states, observations, initial probabilities, transition matrix, and emission matrix here...
states = ['Sunny', 'Rainy']
observations = ['Walk', 'Shop', 'Clean']
initial_probabilities = np.array([0.6, 0.4])
transition_matrix = np.array([[0.7, 0.3],
                               [0.4, 0.6]])
emission_matrix = np.array([[0.1, 0.4, 0.5],
                             [0.6, 0.3, 0.1]])

# Create an instance of HiddenMarkovModel
hmm = HiddenMarkovModel(states, observations, initial_probabilities, transition_matrix, emission_matrix)

# Example usage
observation_sequence = ['Walk', 'Shop', 'Clean']
probability = hmm.predict_sequence_probability(observation_sequence)
state_sequence = hmm.predict_state_sequence(observation_sequence)
print("Probability of observing sequence {} is {:.4f}".format(observation_sequence, probability))
print("Most likely state sequence:", state_sequence)



import numpy as np

def forward_algorithm(observation_sequence, start_prob, transition_prob, emission_prob):
    n_states = start_prob.shape[0]
    n_obs = len(observation_sequence)
    
    # Initialize forward probabilities
    forward_probs = np.zeros((n_obs, n_states))
    forward_probs[0] = start_prob * emission_prob[:, observation_sequence[0]]
    
    # Iterate over observations
    for t in range(1, n_obs):
        for j in range(n_states):
            forward_probs[t, j] = np.sum(forward_probs[t - 1] * transition_prob[:, j]) * emission_prob[j, observation_sequence[t]]
    
    # Compute likelihood of observation sequence
    likelihood = np.sum(forward_probs[-1])
    
    return likelihood, forward_probs

def viterbi_algorithm(observation_sequence, start_prob, transition_prob, emission_prob):
    n_states = start_prob.shape[0]
    n_obs = len(observation_sequence)
    
    # Initialize Viterbi probabilities and backpointers
    viterbi_probs = np.zeros((n_obs, n_states))
    backpointers = np.zeros((n_obs - 1, n_states), dtype=int)
    
    # Initialize first step
    viterbi_probs[0] = start_prob * emission_prob[:, observation_sequence[0]]
    
    # Iterate over observations
    for t in range(1, n_obs):
        for j in range(n_states):
            # Compute maximum probability for current state
            prev_probs = viterbi_probs[t - 1] * transition_prob[:, j]
            max_prob_index = np.argmax(prev_probs)
            viterbi_probs[t, j] = prev_probs[max_prob_index] * emission_prob[j, observation_sequence[t]]
            backpointers[t - 1, j] = max_prob_index
    
    # Backtrack to find the most likely state sequence
    state_sequence = [np.argmax(viterbi_probs[-1])]
    for t in range(n_obs - 2, -1, -1):
        state_sequence.insert(0, backpointers[t, state_sequence[0]])
    
    return state_sequence, viterbi_probs

#Define input observation sequence and HMM parameters
observation_sequence = [0, 1, 2, 3]  #Example observation sequence
start_prob = np.array([0.5, 0.5])  #Initial state probabilities
transition_prob = np.array([[0.7, 0.3], [0.4, 0.6]])  #Transition probabilities
emission_prob = np.array([[0.3, 0.3, 0.2, 0.2], [0.2, 0.2, 0.3, 0.3]])  #Emission probabilities

# Run forward algorithm
likelihood, forward_probs = forward_algorithm(observation_sequence, start_prob, transition_prob, emission_prob)

# Run Viterbi algorithm
state_sequence, viterbi_probs = viterbi_algorithm(observation_sequence, start_prob, transition_prob, emission_prob)

print("Likelihood of observation sequence:", likelihood)
print("Forward probabilities:\n", forward_probs)
print("Most likely state sequence:", state_sequence)


import numpy as np

def forward_algorithm(observation_sequence, start_prob, transition_prob, emission_prob):
    n_states = start_prob.shape[0]
    n_obs = len(observation_sequence)
    
    # Initialize forward probabilities
    forward_probs = np.zeros((n_obs, n_states))
    forward_probs[0] = start_prob * emission_prob[:, observation_sequence[0]]
    
    # Iterate over observations
    for t in range(1, n_obs):
        for j in range(n_states):
            forward_probs[t, j] = np.sum(forward_probs[t - 1] * transition_prob[:, j]) * emission_prob[j, observation_sequence[t]]
    
    # Compute likelihood of observation sequence
    likelihood = np.sum(forward_probs[-1])
    
    return likelihood, forward_probs

def viterbi_algorithm(observation_sequence, start_prob, transition_prob, emission_prob):
    n_states = start_prob.shape[0]
    n_obs = len(observation_sequence)
    
    # Initialize Viterbi probabilities and backpointers
    viterbi_probs = np.zeros((n_obs, n_states))
    backpointers = np.zeros((n_obs - 1, n_states), dtype=int)
    
    # Initialize first step
    viterbi_probs[0] = start_prob * emission_prob[:, observation_sequence[0]]
    
    # Iterate over observations
    for t in range(1, n_obs):
        for j in range(n_states):
            # Compute maximum probability for current state
            prev_probs = viterbi_probs[t - 1] * transition_prob[:, j]
            max_prob_index = np.argmax(prev_probs)
            viterbi_probs[t, j] = prev_probs[max_prob_index] * emission_prob[j, observation_sequence[t]]
            backpointers[t - 1, j] = max_prob_index
    
    # Backtrack to find the most likely state sequence
    state_sequence = [np.argmax(viterbi_probs[-1])]
    for t in range(n_obs - 2, -1, -1):
        state_sequence.insert(0, backpointers[t, state_sequence[0]])
    
    return state_sequence, viterbi_probs

# Define input observation sequence and HMM parameters
observation_sequence = "GGCACTGAA"  # Example observation sequence
symbol_to_index = {'A': 0, 'T': 3, 'G': 2, 'C': 1}
observation_indices = [symbol_to_index[s] for s in observation_sequence]

start_prob = np.array([0.5, 0.5])  # Initial state probabilities
transition_prob = np.array([[0.5, 0.5], [0.4, 0.6]])  # Transition probabilities
emission_prob = np.array([[0.2, 0.3, 0.3, 0.2], [0.3, 0.2, 0.2, 0.3]])  # Emission probabilities

# Run forward algorithm
likelihood, forward_probs = forward_algorithm(observation_indices, start_prob, transition_prob, emission_prob)

# Run Viterbi algorithm
state_sequence, viterbi_probs = viterbi_algorithm(observation_indices, start_prob, transition_prob, emission_prob)

print("Likelihood of observation sequence:", likelihood)
print("Forward probabilities:\n", forward_probs)
print("Most likely state sequence:", state_sequence)
